/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.entity.PolicyEntity;
import io.swagger.model.Policy;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-02-12T07:11:07.511Z")

@Validated
@Api(value = "policies", description = "the policies API")
@RequestMapping(value = "/insuranceapi")
public interface PoliciesApi {

    @ApiOperation(value = "Retrieve a list of policies", nickname = "policiesGet", notes = "Returns a list of all policies in the system", response = PolicyEntity.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of policies", response = Policy.class, responseContainer = "List") })
    @RequestMapping(value = "/policies/{startDate}/{endDate}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<PolicyEntity>> policiesGet(@ApiParam(value = "The startDate of the policies to list",required=true) @PathVariable("startDate") String startDate,
                                             @ApiParam(value = "The endDate of the policies to list",required=true) @PathVariable("endDate") String endDate);


    @ApiOperation(value = "Delete a policy", nickname = "policiesPolicyIdDelete", notes = "Deletes the policy with the specified ID", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The policy has been deleted") })
    @RequestMapping(value = "/policies/{policyId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<String> policiesPolicyIdDelete(@ApiParam(value = "The ID of the policy to delete",required=true) @PathVariable("policyId") String policyId);


    @ApiOperation(value = "Retrieve a policy by ID", nickname = "policiesPolicyIdGet", notes = "Returns the policy with the specified ID", response = Policy.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The policy with the specified ID", response = Policy.class) })
    @RequestMapping(value = "/policies/{policyId}",
        produces = { "*/*" },
        consumes = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<String> policiesPolicyIdGet(@ApiParam(value = "The ID of the policy to retrieve",required=true) @PathVariable("policyId") String policyId);


    @ApiOperation(value = "Update a policy", nickname = "policiesPolicyIdPut", notes = "Updates the policy with the specified ID", response = Policy.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated policy", response = Policy.class) })
    @RequestMapping(value = "/policies/{policyId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Policy> policiesPolicyIdPut(@ApiParam(value = "The ID of the policy to update",required=true) @PathVariable("policyId") String policyId,@ApiParam(value = "The updated policy information" ,required=true )  @Valid @RequestBody Policy policy);


    @ApiOperation(value = "Create a new policy", nickname = "policiesPost", notes = "Adds a new policy to the system", response = Policy.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The newly created policy", response = Policy.class) })
    @RequestMapping(value = "/policies",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> policiesPost(@ApiParam(value = "The policy to add" ,required=true )  @Valid @RequestBody Policy policy);

}
